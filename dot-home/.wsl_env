# ~/.wsl_env
# Source from .profile, .bashrc, or .zshrc:
#   [ -f "$HOME/.wsl_env" ] && source "$HOME/.wsl_env"

# vim: set ft=sh ts=4 sts=4 sw=4 et:

# Fast exit if not inside WSL environment
grep -qi microsoft /proc/version 2>/dev/null || return

# ========================================================
# Windows mount and key PATHs
# ========================================================
export WINDOWS_DRIVE="/mnt/c"
export SYSTEM32_DIR="$WINDOWS_DRIVE/Windows/System32"
export WINDOWS_PROG_FILES="$WINDOWS_DRIVE/Program Files"
export WINDOWS_LOCALAPPDATA=$(wslpath -u "$(cmd.exe /c "echo %LOCALAPPDATA%" 2> /dev/null | tr -d '\r')")
export CMD_EXE="$SYSTEM32_DIR/cmd.exe"

# Setting to explorer.exe opens the link twice
export BROWSER="powershell.exe /C start"

export VSCODE_EXE="$WINDOWS_PROG_FILES/Microsoft VS Code/bin/code"
export SUBLIME_EXE="powershell.exe -NoProfile -Command Start-Process -FilePath 'sublime_text.exe' -ArgumentList"
export PDF_READER_EXE="powershell.exe -NoProfile -Command Start-Process -FilePath 'SumatraPDF.exe' -ArgumentList"

alias codewsl='"$VSCODE_EXE"'
alias sublwsl='"$SUBLIME_EXE"'
alias pdfwsl='"$PDF_READER_EXE"'

# ========================================================
# Append system32 to PATH if not already included (last fallback)
# ========================================================
case ":$PATH:" in
    *:"$SYSTEM32_DIR":*) ;;
    *) PATH="$PATH:$SYSTEM32_DIR" ;;
esac

# ========================================================
# GUI Settings
# ========================================================
if [ -z "${DISPLAY:-}" ] && [ -z "${WAYLAND_DISPLAY:-}" ]; then
    export DISPLAY=:0
    export WAYLAND_DISPLAY=wayland-0
fi


# ========================================================
# Helper functions
# ========================================================

# Windows Explorer
explorer() {
    win_path="$(wslpath -w "${1:-$PWD}" 2> /dev/null)" || {
        echo "Invalid WSL path: ${1:-$PWD}" >&2
        return 1
    }
    ("$CMD_EXE" /c "explorer.exe $win_path" &> /dev/null &) && echo "📂 Opening: $win_path"
}

# PDF opener, can also use as $PDF_READER_EXE <pdf>
openpdf() {
    [ $# -eq 0 ] && {
        echo "Usage: openpdf <file.pdf>" >&2
        return 1
    }
    local file_path=$(wslpath -w "$1" 2> /dev/null) || {
        echo "Invalid WSL path: $1" >&2
        return 1
    }
    eval "$PDF_READER_EXE @('$file_path')" > /dev/null 2>&1
    echo "🔖 Opened PDF: ${1##*/}"
}

# Sublime Text
subl() {
    [ $# -eq 0 ] && set -- "$(wslpath -w "$PWD")"
    eval "$SUBLIME_EXE @('$@')" > /dev/null 2>&1
    echo "✏️ Opened in Sublime: $*"
}

# VS Code
code() {
    [ ! -f "$VSCODE_EXE" ] && {
        echo "VS Code not found at $VSCODE_EXE" >&2
        return 1
    }
    ("$VSCODE_EXE" "$@" > /dev/null 2>&1 &) && echo "✏️ Opened in VSCode: $*"
}

# Run a Neovide instance (where installation is on Windows) from CWD
nvim_nvide() {
    local port="6666"
    local server_port="localhost:$port"

    (nvim --headless --listen "$server_port" > /dev/null 2>&1 &)

    echo "→ Neovim server: $server_port"
    echo "→ Launching Neovide${*:+ ($*)}"

    local args="--server $server_port"
    [[ $# -gt 0 ]] && args="$args $(printf ' "%s"' "$@")"
    powershell.exe -NoProfile -Command "Start-Process neovide -ArgumentList '$args'"
}
